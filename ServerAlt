package assignment7;

import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextArea;
import javafx.stage.Stage;

public class ServerMain extends Application{
	// Text area for displaying contents 
		private TextArea ta = new TextArea(); 

		private PrintStream out;
	    private ArrayList<String> users;
		private ArrayList clientOutputStreams;

		// Number a client 
		private int clientNo = 0; 

		@Override // Override the start method in the Application class 
		public void start(Stage primaryStage) { 
			// Create a scene and place it in the stage 
			Scene scene = new Scene(new ScrollPane(ta), 450, 200); 
			primaryStage.setTitle("MultiThreadServer"); // Set the stage title 
			primaryStage.setScene(scene); // Place the scene in the stage 
			primaryStage.show(); // Display the stage 

			new Thread( () -> { 
				clientOutputStreams = new ArrayList();
				users = new ArrayList();
				try {  // Create a server socket 
					ServerSocket serverSocket = new ServerSocket(8000); 
					ta.appendText("MultiThreadServer started at " 
							+ new Date() + '\n'); 


					while (true) { 
						// Listen for a new connection request 
						Socket socket = serverSocket.accept(); 
						
						PrintStream writer = new PrintStream(socket.getOutputStream());

						clientOutputStreams.add(writer);
						
						// Increment clientNo 
						clientNo++; 

						Platform.runLater( () -> { 
							
							// Display the client number 
							ta.appendText("Starting thread for client " + clientNo +
									" at " + new Date() + '\n'); 

							// Find the client's host name, and IP address 
							InetAddress inetAddress = socket.getInetAddress();
							ta.appendText("Client " + clientNo + "'s host name is "
									+ inetAddress.getHostName() + "\n");
							ta.appendText("Client " + clientNo + "'s IP Address is " 
									+ inetAddress.getHostAddress() + "\n");	
						}); 


						// Create and start a new thread for the connection
						
						new Thread(new HandleAClient(socket, writer)).start();
						
						ta.appendText("Got a connection! \n");
						
					} 
				} 
				catch(IOException ex) { 
					System.err.println(ex);
				}
				catch(Exception e){
					ta.appendText("Error making a connection. \n");
				}
			}).start();
		}


		// Define the thread class for handling
		class HandleAClient implements Runnable {
			private Socket socket; // A connected socket
			private BufferedReader reader;
			private InputStreamReader in;
			private PrintStream client;
			private String[] data;
			/** Construct a thread */ 
			public HandleAClient(Socket socket, PrintStream user) { 
				this.socket = socket;
				this.client = user;
			}
			/** Run a thread */
			public void run() { 
	            String  connect = "Connect", disconnect = "Disconnect", chat = "Chat" ;
	            
				try {
					// Create data input and output streams
					in = new InputStreamReader(socket.getInputStream());
					out = new PrintStream(socket.getOutputStream());
					//DataInputStream inputFromClient = new DataInputStream( socket.getInputStream());
					//DataOutputStream outputToClient = new DataOutputStream( socket.getOutputStream());
					reader = new BufferedReader(in);
					// Continuously serve the client
					while (true) { 
						// Receive radius from the client 
						String text = reader.readLine();
						
						// Send area back to the client
						//Platform.runLater(() -> { 
							
							ta.appendText("Received: " + text + "\n");
		                    data = text.split(":");
		                    Platform.runLater(() -> { 
		                    for (String token:data) 
		                    {
		                        ta.appendText(token + "\n");
		                    }

		                    if (data[2].equals(connect)) 
		                    {
		                        tellEveryone((data[0] + ":" + data[1] + ":" + chat));
		                        userAdd(data[0]);
		                    } 
		                    else if (data[2].equals(disconnect)) 
		                    {
		                        tellEveryone((data[0] + ":has disconnected." + ":" + chat));
		                        userRemove(data[0]);
		                    } 
		                    else if (data[2].equals(chat)) 
		                    {
		                        tellEveryone(text);
		                    } 
		                    else 
		                    {
		                        ta.appendText("No Conditions were met. \n");
		                    }
						});
					}
				} catch(Exception ex) {
					ta.appendText("Lost a connection. \n");
	                //ex.printStackTrace();
	                clientOutputStreams.remove(client);
				}
			}
		}
		
		public static void main(String[] args) {
			launch(args);
		}
		
		public void userAdd (String data) 
	    {
	        String message, add = ": :Connect", done = "Server: :Done", name = data;
	        ta.appendText("Before " + name + " added. \n");
	        users.add(name);
	        ta.appendText("After " + name + " added. \n");
	        String[] tempList = new String[(users.size())];
	        users.toArray(tempList);
	        //System.out.println("I got here!");
	        for (String token:tempList) 
	        {
	            message = (token + add);
	            tellEveryone(message);
	        }
	        tellEveryone(done);
	        ta.appendText(users.toString());
	    }
	    
	    public void userRemove (String data) 
	    {
	        String message, add = ": :Connect", done = "Server: :Done", name = data;
	        users.remove(name);
	        String[] tempList = new String[(users.size())];
	        users.toArray(tempList);

	        for (String token:tempList) 
	        {
	            message = (token + add);
	            tellEveryone(message);
	        }
	        tellEveryone(done);
	    }
	    
	    public void tellEveryone(String message) 
	    {
	    	
		Iterator it = clientOutputStreams.iterator();

	        while (it.hasNext()) 
	        {
	            try 
	            {
	                PrintStream writer = (PrintStream) it.next();
	                writer.println(message);
	                ta.appendText("Sending: " + message + "\n");
	                writer.flush();
	                //ta.setCaretPosition(ta.getDocument().getLength());
	                ta.selectPositionCaret(ta.getLength());
	            } 
	            catch (Exception ex) 
	            {
	            	ta.appendText("Error telling everyone. \n");
	            }
	        } 
	    }
	    
}
